const int JOB_TYPES;
const int C;
const real TIME_BOUND;

binary action deliver;
transient int(0..JOB_TYPES) item;

int(0..C)[] size = [0, 0];

property PminBothFullIsOne = Pmin(<> (size[0] == C && size[1] == C)) == 1;
property TminBothFull = Xmin(T, size[0] == C && size[1] == C);
property TmaxBothFull = Xmax(T, size[0] == C && size[1] == C);
property PmaxBothFullBound = Pmax(<>[T<=TIME_BOUND] (size[0] == C && size[1] == C));
property SmaxBothFull = Smax((size[0] == C && size[1] == C));

process Station(int id, int(0..JOB_TYPES)[] q)
{  
   alt {
   :: when(size[id - 1] < C) rate(0.2 * id + 0.1) tau;
      {= q[size[id - 1]] = (int)any(i, 1 <= i && i <= JOB_TYPES), size[id - 1]++ =}
   :: when(size[id - 1] > 0) deliver! {= item = q[0] =};
      alt {
      :: {= q = array(i, C, i < size[id - 1] - 1 ? q[i + 1] : 0), size[id - 1]-- =}
      :: {==}
      }
   }; 
   Station(id, q)
}

process Server()
{
   int(1..JOB_TYPES) j;
   
   deliver? {= j = item =};
   rate(pow(2, j)) tau;
   Server()
}

restrict { deliver!, deliver? }
{
   par {
   :: Station(1, array(i, C, 0))
   :: Station(2, array(i, C, 0))
   :: Server()
   }
}

