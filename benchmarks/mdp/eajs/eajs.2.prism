mdp

formula localFailure = loc_1=crit&t_1=0&failure_1;
formula noLocalFailure = !((loc_1=crit&t_1=0&failure_1));
formula emptyBattery = battery_load=0;
formula process_1_finishes = (loc_1=crit&t_1=0);
formula process_2_finishes = (loc_2=crit&t_2=0);

label "localFailure" = ((loc_1=crit&t_1=0&failure_1));
label "noLocalFailure" = ((!((loc_1=crit&t_1=0&failure_1))));
label "emptyBattery" = ((battery_load=0));
label "process_1_finishes" = (((loc_1=crit&t_1=0)));
label "process_2_finishes" = (((loc_2=crit&t_2=0)));

const int energy_capacity;
const int t_max = 9;
const int undef = 0;
const int ncrit = 2;
const int wait = 0;
const int crit = 1;
const int none = 0;
const int process_1 = 1;
const int process_2 = 2;
const int m_1 = 1;
const int m_2 = 1;
const int boost_multiplicator = 3;

module Process_2

	loc_2 : [0..2] init ncrit;
	t_2 : [0..t_max] init 0;

	[tick] loc_2=ncrit&t_2!=0 -> (t_2'=t_2-1);
	[tick] loc_2=ncrit&t_2=0 -> (loc_2'=wait);
	[tick] loc_2=wait&user_1!=process_2 -> (t_2'=max(0, t_2-1));
	[tick] loc_2=wait&user_1=process_2 -> 1/3 : (loc_2'=crit) & (t_2'=2) + 2/3 : (loc_2'=crit) & (t_2'=3);
	[tick] loc_2=crit&t_2>0 -> (t_2'=max(t_2-(boost_1+1), 0));
	[tick] loc_2=crit&t_2=0 -> 2/3 : (loc_2'=ncrit) & (t_2'=4) + 1/3 : (loc_2'=ncrit) & (t_2'=5);

endmodule

module Resources

	boost_1 : [0..1] init 0;
	user_1 : [0..2] init none;

	[tick] user_1=none&loc_1=wait -> (user_1'=process_1);
	[tick] user_1=none&loc_1=wait -> (user_1'=process_1) & (boost_1'=1);
	[tick] user_1=process_1&!(((loc_1=crit&t_1=0))) -> true;
	[tick] user_1=process_1&(((loc_1=crit&t_1=0)))&loc_1!=wait&loc_2!=wait -> (user_1'=none) & (boost_1'=0);
	[tick] user_1=process_1&(((loc_1=crit&t_1=0)))&loc_2=wait -> (user_1'=process_2) & (boost_1'=1);
	[tick] user_1=process_1&(((loc_1=crit&t_1=0)))&loc_2=wait -> (user_1'=process_2) & (boost_1'=0);
	[tick] user_1=none&loc_2=wait -> (user_1'=process_2);
	[tick] user_1=none&loc_2=wait -> (user_1'=process_2) & (boost_1'=1);
	[tick] user_1=process_2&!(((loc_2=crit&t_2=0))) -> true;
	[tick] user_1=process_2&(((loc_2=crit&t_2=0)))&loc_1!=wait&loc_2!=wait -> (user_1'=none) & (boost_1'=0);
	[tick] user_1=process_2&(((loc_2=crit&t_2=0)))&loc_1=wait -> (user_1'=process_1) & (boost_1'=1);
	[tick] user_1=process_2&(((loc_2=crit&t_2=0)))&loc_1=wait -> (user_1'=process_1) & (boost_1'=0);
	[tick] user_1=none&loc_1!=wait&loc_2!=wait -> true;

endmodule

module Process_1

	failure_1 : bool init false;
	t_1 : [0..t_max] init 0;
	loc_1 : [0..2] init ncrit;

	[tick] loc_1=ncrit&t_1!=0 -> (t_1'=t_1-1);
	[tick] loc_1=ncrit&t_1=0 -> 2/3 : (t_1'=9) & (loc_1'=wait) + 1/3 : (t_1'=7) & (loc_1'=wait);
	[tick] loc_1=wait&user_1!=process_1 -> (t_1'=max(0, t_1-1));
	[tick] loc_1=wait&user_1=process_1 -> 1/3 : (loc_1'=crit) & (t_1'=2) & (failure_1'=(2<(boost_1+1)*t_1) ? false : true) + 2/3 : (loc_1'=crit) & (t_1'=3) & (failure_1'=(3<(boost_1+1)*t_1) ? false : true);
	[tick] loc_1=crit&t_1>0 -> (t_1'=max(t_1-(boost_1+1), 0));
	[tick] loc_1=crit&t_1=0 -> 2/3 : (loc_1'=ncrit) & (t_1'=4) & (failure_1'=false) + 1/3 : (loc_1'=ncrit) & (t_1'=5) & (failure_1'=false);

endmodule

module Battery

	battery_load : [0..energy_capacity] init energy_capacity;

	[tick] loc_1=ncrit -> (battery_load'=max(0, battery_load-2*m_1));
	[tick] loc_1=wait -> (battery_load'=max(0, battery_load-1*m_1));
	[tick] loc_1=crit&user_1=process_1&boost_1=0 -> (battery_load'=max(0, battery_load-3*m_1));
	[tick] loc_1=crit&user_1=process_1&boost_1=1 -> (battery_load'=max(0, battery_load-3*m_1*boost_multiplicator));

endmodule

rewards "energyLocal" 

	[tick] loc_1=ncrit : 2*m_1;
	[tick] loc_1=wait : 1*m_1;
	[tick] loc_1=crit&user_1=process_1&boost_1=0 : 3*m_1;
	[tick] loc_1=crit&user_1=process_1&boost_1=1 : 3*m_1*boost_multiplicator;

endrewards

rewards "utilityLocal" 

	[tick] loc_1=crit&t_1=0&!failure_1&!((battery_load=0)) : 1;

endrewards

